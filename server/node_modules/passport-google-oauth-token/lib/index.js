'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OAuth2Strategy = require('passport-oauth2');

var InternalOAuthError = OAuth2Strategy.InternalOAuthError;

/**
 * `GoogleOauthTokenStrategy` constructor.
 *
 * The Google authentication strategy authenticates requests by delegating to
 * Google using the OAuth 2.0 protocol.
 *
 * Applications must supply a `verify` callback which accepts an `accessToken`,
 * `refreshToken` and service-specific `profile`, and then calls the `cb`
 * callback supplying a `user`, which should be set to `false` if the
 * credentials are not valid.  If an exception occurred, `err` should be set.
 *
 * @param {Object} options
 * @param {Function} verify
 * @example
 * passport.use(new GoogleOauthTokenStrategy(
 *   {
 *     clientID: '123456789',
 *     clientSecret: 'abcxyz',
 *   },
 *   (accessToken, refreshToken, profile, cb) => {
 *     User.findOrCreate({ googleId: profile.id }, cb);
 *   }
 * );
 */

var GoogleOauthTokenStrategy = function (_OAuth2Strategy) {
  _inherits(GoogleOauthTokenStrategy, _OAuth2Strategy);

  function GoogleOauthTokenStrategy() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var verify = arguments[1];

    _classCallCheck(this, GoogleOauthTokenStrategy);

    var authURLVersion = options.authURLVersion || 'v2';
    var tokenURLVersion = options.tokenURLVersion || 'v4';
    var userinfoURLVersion = options.userinfoURLVersion || 'v3';

    options.tokenURL = options.tokenURL || 'https://www.googleapis.com/oauth2/' + tokenURLVersion + '/token';
    options.authorizationURL = options.authorizationURL || 'https://accounts.google.com/o/oauth2/' + authURLVersion + '/auth';

    var _this = _possibleConstructorReturn(this, (GoogleOauthTokenStrategy.__proto__ || Object.getPrototypeOf(GoogleOauthTokenStrategy)).call(this, options, verify));

    _this.name = 'google-oauth-token';
    _this._profileURL = options.profileURL || 'https://www.googleapis.com/oauth2/' + userinfoURLVersion + '/userinfo';
    return _this;
  }

  /**
   * Authenticate request by delegating to a service provider using OAuth 2.0.
   * @param {Object} req
   * @param {Object} options
   */


  _createClass(GoogleOauthTokenStrategy, [{
    key: 'authenticate',
    value: function authenticate(req, _options) {
      var _this2 = this;

      var accessToken = this.lookup(req, 'access_token');
      var refreshToken = this.lookup(req, 'refresh_token');

      this._loadUserProfile(accessToken, function (error, profile) {
        if (error) {
          return _this2.error(error);
        }

        var verified = function verified(error, user, info) {
          if (error) {
            return _this2.error(error);
          }

          if (!user) {
            return _this2.fail(info);
          }

          return _this2.success(user, info);
        };

        if (_this2._passReqToCallback) {
          _this2._verify(req, accessToken, refreshToken, profile, verified);
        } else {
          _this2._verify(accessToken, refreshToken, profile, verified);
        }
      });
    }

    /**
     * Retrieve user profile from Google.
     *
     * This function constructs a normalized profile, with the following properties:
     *
     *   - `provider`         always set to `google`
     *   - `id`               the user's Google ID
     *   - `username`         the user's Google username
     *   - `displayName`      the user's full name
     *
     * @param {String} accessToken
     * @param {Function} done
     */

  }, {
    key: 'userProfile',
    value: function userProfile(accessToken, done) {
      this._oauth2.get(this._profileURL, accessToken, function (error, body, _res) {
        if (error) {
          return done(new InternalOAuthError('Failed to fetch user profile', error));
        }

        try {
          var json = body;

          if (typeof body === 'string') {
            json = JSON.parse(body);
          }

          var profile = GoogleOauthTokenStrategy.parseProfile(json);
          profile._raw = body;

          done(null, profile);
        } catch (e) {
          done(e);
        }
      });
    }

    /**
     * This method handles searhing the value of provided field in body, query, and header.
     *
     * @param {Object} req http request object
     * @param {String} field
     * @returns {String} field's value in body, query, or headers
     */

  }, {
    key: 'lookup',
    value: function lookup(req, field) {
      return req.body && req.body[field] || req.query && req.query[field] || req.headers && req.headers[field];
    }

    /**
     * Parse profile.
     *
     * Parses user profiles as fetched from Google's OpenID Connect-compatible user
     * info endpoint.
     *
     * The amount of detail in the profile varies based on the scopes granted by the
     * user. The following scope values add additional data:
     *
     *     `profile` - basic profile information
     *     `email` - email address
     *
     * References:
     *   - https://developers.google.com/identity/protocols/OpenIDConnect
     *
     * @param {object} json
     * @return {object}
     */

  }], [{
    key: 'parseProfile',
    value: function parseProfile(json) {
      var profile = {
        provider: 'google',
        id: json.sub || json.id,
        displayName: json.name || ''
      };

      if (json.family_name || json.given_name) {
        profile.name = {
          familyName: json.family_name,
          givenName: json.given_name
        };
      }

      if (json.email) {
        profile.emails = [{ value: json.email, verified: json.email_verified }];
      }

      if (json.picture) {
        profile.photos = [{ value: json.picture }];
      }

      profile._json = json;

      return profile;
    }
  }]);

  return GoogleOauthTokenStrategy;
}(OAuth2Strategy);

exports.default = GoogleOauthTokenStrategy;
module.exports = exports.default;